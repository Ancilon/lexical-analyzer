options{
STATIC = false;
DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(Lexico)
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

public class Lexico
{
public String analizeLexica;
public String processa() throws Exception{
    Token t = new Token ();

    do {

    t = getNextToken(); //Obtém o próximo token
    
    String nomeToken = tokenImage[t.kind];
    analizeLexica=analizeLexica+nomeToken+
    (("\tToken: "  + t.beginLine))+
    ("\tLinha: "  + t.beginLine)+
    ("\tColuna: "  + t.beginColumn)+
    "\n";

    } while(t.kind!=0); //condicao de parada: final do arquivo (constante eof 0 )

    return analizeLexica;
}

    public static void main(String args[], String x) throws ParseException, FileNotFoundException {

    try {

    }catch (Error e){
        System.out.println(e.getMessage()); //Mensagem de erro léxico (em ingles) mostrando linha e coluna
    }

    }
    }
PARSER_END(Lexico)


//Espaço em Branco
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

// Comentarios
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

// Palavras reservadas
TOKEN:
{
	  <PROGRAM:"program"> 
	| <EXECUTE:"execute this">
	| <DECLARE:"declare this">
	| <CONSTANT:"as constant">
	| <VARIABLE:"as variable">
	| <ASSING:"assign this">
	| <SHOW:"show this">
	| <ACQUIRE:"acquire this">
	| <PUT:"put this">
	| <CHECK:"check this">
	| <TRESULT:"true result">
	| <URESULT:"untrue result">
	| <CARRY:"carry out this">
}

//Tipo variavel
TOKEN:
{
	  <INTEGER:"integer"> 
	| <REAL:"real"> 
	| <STRING:"string">
	| <BOOLEAN:"boolean">
	| <TRUE:"true">
	| <UNTRUE:"untrue">
}

//Literals
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}


//Identificadores
TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
|
  < #UNDERSCORE:
    [
    "\u005f"
    ]
  >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

//Separadores
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

// Operadores
TOKEN:
{
	  <SUM:"+"> 
	| <DIV:"/"> 
	| <DIVI:"%">
	| <REST:"%%">
	| <MINUS:"-">
	| <MULT:"*">
	| <EQUAL:"==">
	| <DIFF:"!=">
	| <LESSTHAN:"<<">
	| <GREATERTHAN:">>">
	| <LESSEQUAL:"<<=">
	| <GREATEREQUAL:">>=">
	| <AND:"&">
	| <OR:"|">
	| <NOT:"!">{
            System.out.println("Palavra Reservada: "+image);
        }
}
