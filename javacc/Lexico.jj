options{
STATIC = false;
DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(Lexico)
import java.io.*;
class Lexico
{
    Lexico lexico;
    boolean Menosshort = false;
    public void run() throws Exception{
        Token t = new Token ();
        do {
            t = getNextToken();
            String nomeToken = tokenImage[t.kind];
        } while(t.kind!=0);
    }

	public static void main( String[] args )throws ParseException, Exception
	{
        boolean debug = false;
        int i;
        boolean ms = false;
        Lexico lex = new Lexico(System.in);

        try {
            lex.run();
        }
        catch (Exception e) {
            System.out.println("Erro de Token.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        catch (Error e) {
            System.out.println(e.getMessage());
        }
	}
}
PARSER_END(Lexico)

TOKEN:
{
	  <PALAVRAS_RESERVADAS:"program" | "execute" | "declare" | "constant" | "variable" | "assign" | "show" | "acquire" | "put" | "check"
	  | "carry" | "out" | "this" | "result" | "as" | "integer" | "real" | "string" | "boolean">
	  { System.out.println(image + "\t" + matchedToken.beginLine + "\t" +
	  matchedToken.beginColumn + "\t" + matchedToken.kind + " Palavra Reservada");} |

	  <CONSTANTES_INTEIRAS:(["0"-"9"])(["0"-"9"])?(["0"-"9"])?(["0"-"9"])?>
	  { System.out.println(image + "\t" + matchedToken.beginLine + "\t" +
      matchedToken.beginColumn + "\t" + matchedToken.kind + " Constantes Inteiras");} |

	  <CONSTANTES_REAIS:(["0"-"9"])(["0"-"9"])?(["0"-"9"])?(["0"-"9"])?(["0"-"9"])?"."(["0"-"9"])(["0"-"9"])?(["0"-"9"])?>
	  { System.out.println(image + "\t" + matchedToken.beginLine + "\t" +
      matchedToken.beginColumn + "\t" + matchedToken.kind + " Constantes Reais");} |

      <CONSTANTES_LITERAIS:"true" | "untrue">
      { System.out.println(image + "\t" + matchedToken.beginLine + "\t" +
      matchedToken.beginColumn + "\t" + matchedToken.kind + " Constantes Reais");} |

      <SIMBOLOS_ESPECIAIS:"(" | ")" | "[" | "]" | "+" | "/" | "%" | "%%" | "-" | "*" | "==" | "!="
      | "<<" | ">>" | "<<=" | ">>=" | "&" | "|" | "!">
      { System.out.println(image + "\t" + matchedToken.beginLine + "\t" +
      matchedToken.beginColumn + "\t" + matchedToken.kind + " Simbolos Especiais");}
}

SKIP :
{
	" "|"\n" | "\r" | "\r\n"
	| <COMENTARIO: "//" (<COM>)*>
    | <COMENTARIOS: "/*" ("\n" | "\r" | <COM>)* "*/" >
    | <#COM: ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n")))*>
}

SPECIAL_TOKEN: {
    <INVALIDO_LEXICO: (~[" ", "\t","\n", "\r", "\f"])+>
    { System.out.println("Erro: " + image + "\t Linha:" + matchedToken.beginLine + "\t Coluna: "  + matchedToken.beginColumn);}
}
