options{
STATIC = false;
DEBUG_LOOKAHEAD = false;
}
PARSER_BEGIN(Scanner_1)
package parser;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

public class Scanner_1
{
AnalizarLexico analizarlexico;
boolean Menosshort = false; //Saida resumida falso
public void processa() throws Exception{
Token t = new Token ();

do {

t = getNextToken(); //Obtém o próximo token
String nomeToken = tokenImage[t.kind]; //guarda o nome do token na string
//System.out.println(nomeToken + "___" + t); //imprime o token 
} while(t.kind!=0); //condicao de parada: final do arquivo (constante eof 0 )
}

public static void main(String args[], String x) throws ParseException, FileNotFoundException {
//Tratar leitura do arquivo... 
boolean debug = false;
String nomeArq = new String(x);
Scanner_1 parser;
int i;
boolean ms = false;
Scanner_1 lex = new Scanner_1(new FileInputStream(nomeArq));
try {
//lex.processa(); //processamento dos lexemas
//lex.INIT();
JOptionPane.showMessageDialog(null, "Analise Sintaxica OK");
}
catch (Exception e) 
{
JOptionPane.showMessageDialog(null, "Analise Sintaxica NOT OK");
System.out.println("Erro de Token.");
System.out.println(e.getMessage());
e.printStackTrace(); 
}
catch (Error e)
{
System.out.println(e.getMessage()); //Mensagem de erro léxico (em ingles) mostrando linha e coluna
}

}
}
PARSER_END(Scanner_1)

/* ESPECIFICAÇÃO DO ANALISADOR LÉXICO */

TOKEN_MGR_DECLS:
{
AnalizarLexico analizarlexico;
//public ArrayList<String> Painel2 = new ArrayList<>();
int countLexError = 0;
public int foundLexError()
{
   return countLexError;
}
}

SKIP : // TOKENS IGNORADOS
{
 " "
| "\r" 
| "\t" 
| "\n"
}

SKIP : //COMENTARIO DE MULTIPLAS LINHA
{
 "/*" : COMENTARIOMULTIPLASLINHAS
}

<COMENTARIOMULTIPLASLINHAS> SKIP:
{
//CONDIÇÃO DE PARADA DO COMENTARIO DE UMA LINHA
"*/" : DEFAULT
| <~[]>
}

SKIP : //COMENTARIO DE UMA LINHA
{
"//" : COMENTARIOUMALINHA
}
<COMENTARIOUMALINHA> SKIP:
{
//CONDIÇÃO DE PARADA DO COMENTARIO DE UMA LINHA
<["\n","\r"]> : DEFAULT | <~[]> 
}

/*PADRÕES DE EXPRESSÕES REGULARES
TOKEN : //Constante
{
< CONSTANTE : (< DIGITO >)+ >
| < #DIGITO : [ "0"-"9" ] >	
| < ID: (< LETRA > (< LETRA> | < DIGITO >)*)>
| < #LETRA: ["A"-"Z"] >
}
TOKEN : // BIBLIOTECAS DO JAVA
{
< BIBLIOTECA_JAVA : ("import ")* ("java" | "javax")+ ( "."(["A"-"Z","a"-"z"])* | "*")* (";")*>{System.out.println("Biblioteca ---------> "+image);
                                                                                               Painel2.add("\u005cnBiblioteca ---------> "+image);
                                                                                               analizarlexico.Lista(Painel2);}
}*/
TOKEN : // PALAVRAS RESERVADAS
{
<CLA_TIPOS: "private" | "public" | "protected">{System.out.println("Protecao de tipo ---> "+image);
                                                Painel2.add("\u005cnProtecao de tipo ---> "+image);
                                                analizarlexico.Lista(Painel2);}
| <TYPEDEF: "typedef" >{System.out.println("Renomea topo de composto -> "+image);
                        Painel2.add("\u005cnRenomea topo de composto -> "+image);
                        analizarlexico.Lista(Painel2);}
| <TIPOS_PRIMITIVOS: "String" | "int" | "char" | "float" | "double" | <LONG> (" ")+ "int" | <LONG> (" ")+ "double">{System.out.println("Tipo primitivo -----> "+image);
                                                                                                  Painel2.add("\u005cnTipo primitivo -----> "+image);
                                                                                                  analizarlexico.Lista(Painel2);}
| <TIPOS_CONPOSTOS: "struct">{System.out.println("Tipo de composto ---> "+image);
                              Painel2.add("\u005cnTipo de composto ---> "+image);
                              analizarlexico.Lista(Painel2);}
| <IF: "if" >{System.out.println("Palavra reservada --> "+image);
                                          Painel2.add("\u005cnPalavra reservada --> "+image);
                            analizarlexico.Lista(Painel2);}
| <ELSE: "else" >{System.out.println("Palavra reservada --> "+image);
                                          Painel2.add("\u005cnPalavra reservada --> "+image);
                            analizarlexico.Lista(Painel2);}
| <FOR: "for" >{System.out.println("Palavra reservada --> "+image);
                                          Painel2.add("\u005cnPalavra reservada --> "+image);
                            analizarlexico.Lista(Painel2);}
| <DO: "do" >{System.out.println("Palavra reservada --> "+image);
                                          Painel2.add("\u005cnPalavra reservada --> "+image);
                            analizarlexico.Lista(Painel2);}
| <WHILE: "while" >{System.out.println("Palavra reservada --> "+image);
                                          Painel2.add("\u005cnPalavra reservada --> "+image);
                            analizarlexico.Lista(Painel2);}
| <SWITCH: "switch" >{System.out.println("Palavra reservada --> "+image);
                                          Painel2.add("\u005cnPalavra reservada --> "+image);
                            analizarlexico.Lista(Painel2);}
| <CASE: "case" >{System.out.println("Palavra reservada --> "+image);
                                          Painel2.add("\u005cnPalavra reservada --> "+image);
                            analizarlexico.Lista(Painel2);}
| <RETURN: "return" >{System.out.println("Palavra reservada --> "+image);
                                          Painel2.add("\u005cnPalavra reservada --> "+image);
                            analizarlexico.Lista(Painel2);}
| <BREAK_CONTINUE: "break" | "continue" >{System.out.println("Palavra reservada --> "+image);
                                          Painel2.add("\u005cnPalavra reservada --> "+image);
                                          analizarlexico.Lista(Painel2);}
| <PALAVRAS_RESERVADAS: "auto" | "const"
| "default" | "enum" | "extern" | "goto" | "register" 
| "short" | "signed"
| "sizeof" | "static" | "union" | "unsigned"  
| "volatile"
| "abstract"
| "strictfp"
| "boolean"
| "interface"
| "bufferIn"
| "super"
| "extends"
| "JFrame"
| "swing"
| "javax"
| "long"
| "byte"
| "final"
| "native"
| "synchronized"
| "finally"
| "new"
| "this"
| "Thread"
| "catch"
| "package"
| "throw"
| "throws"
| "class"
| "transient"
| "try"
| "implements"
| "System"
| "out"
| "println"
| "@Override"
| " @SuppressWarnings"
| "import">{System.out.println("Palavra reservada --> "+image);
                                     Painel2.add("\u005cnPalavra reservada --> "+image);
                                     analizarlexico.Lista(Painel2);}
| <VOID: "void">{System.out.println("Palavra reservada --> "+image);
                 Painel2.add("\u005cnPalavra reservada --> "+image);
                 analizarlexico.Lista(Painel2);}
| <SIMBOLO_RESERVADO: "#">{System.out.println("Inicio das macros --> "+image);
                           Painel2.add("\u005cnInicio das macros --> "+image);
                           analizarlexico.Lista(Painel2);}
| <#LONG: "long">
}

TOKEN :
{
<DELIMITADOR_PV: <PV>>{System.out.println("Ponto e virgula ----> "+image);
                       Painel2.add("\u005cnPonto e virgula ----> "+image);
                       analizarlexico.Lista(Painel2);}
| <DELIMITADOR_V: <v>>{System.out.println("Virgula ------------> "+image);
                       Painel2.add("\u005cnVirgula ------------> "+image);
                       analizarlexico.Lista(Painel2);}
| <DELIMITADOR_ACO: <A_CO>>{System.out.println("Abre colchete ------> "+image);
                            Painel2.add("\u005cnAbre colchete ------> "+image);
                            analizarlexico.Lista(Painel2);}
| <DELIMITADOR_FCO: <F_CO>>{System.out.println("Feicha colchete ----> "+image);
                            Painel2.add("\u005cnFeicha colchete ----> "+image);
                            analizarlexico.Lista(Painel2);}
| <DELIMITADOR_ACHA: <A_CHA>>{System.out.println("Abre chave ---------> "+image);
                              Painel2.add("\u005cnAbre chave ---------> "+image);
                              analizarlexico.Lista(Painel2);}
| <DELIMITADOR_FCHA: <F_CHA>>{System.out.println("Feicha chave -------> "+image);
                              Painel2.add("\u005cnFeicha chave -------> "+image);
                              analizarlexico.Lista(Painel2);}
| <DELIMITADOR_APA: <A_PA>>{System.out.println("Abre parenteses ----> "+image);
                            Painel2.add("\u005cnAbre parenteses ----> "+image);
                            analizarlexico.Lista(Painel2);}
| <DELIMITADOR_FPA: <F_PA>>{System.out.println("Feicha parenteses --> "+image);
                            Painel2.add("\u005cnFeicha parentese --> "+image);
                            analizarlexico.Lista(Painel2);}
| <#PV: ";">
| <#v: ",">
| <#A_CO: "[">
| <#F_CO: "]">
| <#A_CHA: "{">
| <#F_CHA: "}">
| <#A_PA: "(">
| <#F_PA: ")">
| <OPERADOR_ARITMETICO_MULT: <MULT>>{System.out.println("Op. aritimetico ----> "+image);
                                    Painel2.add("\u005cnOp. aritimetico ----> "+image);
                                                        analizarlexico.Lista(Painel2);}
| <OPERADOR_ARITMETICO: <MAIS> | <MENUS> | <DIV> | <RESTO>>{System.out.println("Op. aritimetico ----> "+image);
                                                        Painel2.add("\u005cnOp. aritimetico ----> "+image);
                                                        analizarlexico.Lista(Painel2);}

| <OPERADOR_RELACIONAL: "<" | ">" | "<=" | ">=" | "!=" | "==">{System.out.println("Op. relacional -----> "+image);
                                                               Painel2.add("\u005cnOp. relacional -----> "+image);
                                                               analizarlexico.Lista(Painel2);}
| <OPERADOR_ATRIBUICAO: "+=" | "-=" | "=" | "*=" | "%=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" >{System.out.println("Op. atribuicao -----> "+image);
                                      Painel2.add("\u005cnOp. atribuicao -----> "+image);
                                      analizarlexico.Lista(Painel2);}
| <OPERADOR_ATRIBUICAO_IGU: <IGU> >{System.out.println("Operador igual --> "+image);
                                    Painel2.add("\u005cnOp Operador igual --> "+image);
                                      analizarlexico.Lista(Painel2);}
| <#IGU: "=">
| <OPERADOR_INCREMENTO: "++" | "--">{System.out.println("Op auto incremento -> "+image);
                                      Painel2.add("\u005cnOp auto incremento -> "+image);
                                      analizarlexico.Lista(Painel2);}

| <OPERADOR_NEGACAO: "!" >{System.out.println("Operador negacao ---> "+image);
                           Painel2.add("\u005cnOperador negacao ---> "+image);
                           analizarlexico.Lista(Painel2);}

| <OPERADOR_LOGICO: "||" | "&&" >{System.out.println("Operador logico ----> "+image);
                                  Painel2.add("\u005cnOperador logico ----> "+image);
                                  analizarlexico.Lista(Painel2);}
| <OPERADOR_APONTADOR: "<<" | ">>" | "&" | ".">{System.out.println("Operador apontador -> "+image);
                            Painel2.add("\u005cnOperador apontador -> "+image);
                            analizarlexico.Lista(Painel2);}
| <#DIV: "/">
| <#MAIS: "+">
| <#MENUS: "-">
| <#MULT: "*">
| <#RESTO: "%">
}

TOKEN : {
 <INT_CONSTANTE: (<DIGITO>)+ >{System.out.println("Constante inteiro --> "+image);
                            Painel2.add("\u005cnConstante inteiro --> "+image);
                            analizarlexico.Lista(Painel2);}
| <REAL_CONSTANTE: (<DIGITO>)+ "." (<DIGITO>)+>{System.out.println("Constante real -----> "+image);
                                                Painel2.add("\u005cnConstante real -----> "+image);
                                                analizarlexico.Lista(Painel2);}
| <LOGICO_CONSTANTE: "true" | "false">{System.out.println("Constante logico ---> "+image);
                                       Painel2.add("\u005cnConstante logico ---> "+image);
                                       analizarlexico.Lista(Painel2);}
| <STRING_CONSTANTE: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n")))* "\"">{System.out.println("Frase --------------> "+image);
                                                                                                                                    Painel2.add("\u005cnFrase --------------> "+image);
                                                                                                                                    analizarlexico.Lista(Painel2);}
| <#DIGITO: ["0"-"9"]>
}
//TOKEN IDENTIFICADOR
//Em Java, um identificador é uma seqüência de símbolos UNICODE (64K símbolos) que começa com
//uma letra, um símbolo subscrito _, ou o caractere $
TOKEN : {
 <IDENTIFICADOR: (("_")|("$"))* <LETRA>(<LETRA>|<DIGITO> | "_")*(["$"])?>{System.out.println("Identificador ------> "+image);
                                                           Painel2.add("\u005cnIdentificador ------> "+image);
                                                           analizarlexico.Lista(Painel2);}
| <BIBLIOTECA: "<" (<LETRA>)+ "." (<LETRA>)+ ">">{System.out.println("Biblioteca ---------> "+image);
                                                           Painel2.add("\u005cnBiblioteca ---------> "+image);
                                                           analizarlexico.Lista(Painel2);}
| <#LETRA: (["a"-"z","A"-"Z"])>
}

// TRATANDO OS ERROS LEXICOS ENCONTRADOS
SPECIAL_TOKEN : {
<NAO_IDENTIFICADO: (("@")* (["a"-"z","A"-"Z","0"-"9"])*("@")*)*> {System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" Caractere invalido encontrado: " + image);
                                                                          countLexError++;
                                                                          System.out.println("Erro Lexico --------> "+image);
                                                                          Painel2.add("\u005cnErro lexico -------->  Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" "+image);
                                                                          analizarlexico.Lista(Painel2);}

|
<INVALIDO_LEXICO: 
(~["a"-"z",
"A"-"Z",
"0"-"9",
"\"",
"(",
")",
"[",
"]",
"{",
"}",
";",
",",
".",
"=",
">",
"<",
"!",
"+",
"-",
"*",
"/",
"%",
" ",
"\t",
"\n",
"\r",
"\f"
])+>{System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" Caractere invalido encontrado: " + image + "TOTAL ERRO "+countLexError);
                          countLexError++;
                          System.out.println("Erro Lexico --------> "+image);
                          Painel2.add("\u005cnErro lexico -------->  Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" "+image);
                          analizarlexico.Lista(Painel2);}
|
<INVALID_CONST:
"\"" (~["\n","\r","\""])*["\n","\r"]>{System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" Caractere invalido encontrado \\n: " + image+" Era esperado uma aspa");
                                     countLexError++;
                                     System.out.println("Erro Lexico --------> "+image);
                                     Painel2.add("\u005cnErro lexico -------->  Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" "+image);
                                     analizarlexico.Lista(Painel2);}

}
//################################################################################
void INIT():{}{ (ALG())* {/*System.out.println("----------FIM----ANALIZADO COM SUCESSO");*/}}

void ALG():{}{
    try{ <CLA_TIPOS>}catch (Exception e){
        System.out.println(e);
        INIT();
    }INICIANDO_CLA()
| 
    try{ <TIPOS_PRIMITIVOS>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }INICIANDO_TIPO() 
| 
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    } INICIANDO_ID() 
//| <VOID> <IDENTIFICADOR> <DELIMITADOR_APA> FUNCAO() 
//| <TYPEDEF> INICIANDO_TYPEDEF() 
//| <TIPOS_CONPOSTOS> INICIANDO_STRUCT() 
//| <IF> <DELIMITADOR_APA> (<OPERADOR_NEGACAO>)? INICIANDO_IF() <DELIMITADOR_FPA> (CONTEUDO_IF())? 
//| <FOR> <DELIMITADOR_APA> INICIANDO_FOR()
 }
//################################################################################
void CORPO_STRUCT():{}{
    try{ <TIPOS_PRIMITIVOS>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    } DECLARACAO_VA() 
| 
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }DECLARACAO_VA() }
//################################################################################
void FIM_STRUCT():{}{
     try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
     try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    } 
| 
    try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    }}
//################################################################################
void IDENTIFICAR_INICIANDO_ID():{}{ 
    try{ <DELIMITADOR_APA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }FUNCAO() 
| DECLARACAO_VA() }
//################################################################################
void FIM_TYPEDEF():{}{ 
    try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }FIM_TYPEDEF() 
|
    try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
void INICIANDO_TYPEDEF():{}{ 
    try{ <TIPOS_CONPOSTOS>}catch (Exception e){
        System.out.println(e);
        INIT();
    }INICIANDO_STRUCT() 
|
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }FIM_TYPEDEF() }
//################################################################################
void INICIANDO_STRUCT():{}{ 
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <DELIMITADOR_ACHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }(CORPO_STRUCT())* 
    try{ <DELIMITADOR_FCHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }FIM_STRUCT() }
//################################################################################
void INICIANDO_ID():{}{ // ANALISAR SE ESTA CORRETO OU NÃO########// ANALISAR SE ESTA CORRETO OU NÃO##################################
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }IDENTIFICAR_INICIANDO_ID() 
| 
    try{ <DELIMITADOR_APA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }CHAMADA_FUNCAO() 
| OPERADOR() ATRIBUTO() ATRIBUIR_NOR() 
|
     try{ <DELIMITADOR_ACO>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
     try{ <INT_CONSTANTE>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
     try{ <DELIMITADOR_FCO>}catch (Exception e){
        System.out.println(e);
        INIT();
    }ATRIBUIR_VETOR() 
| 
     try{ <OPERADOR_INCREMENTO>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
     try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
      try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
      try{ <OPERADOR_ARITMETICO>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
      (try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    })*
      try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    }


} // ANALISAR SE ESTA CORRETO OU NÃO
//################################################################################
void PARAMETROS():{}{ OPERADORES() ATRIBUTO() PARAMETROS() 
|
       try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }ATRIBUTO() PARAMETROS() 
|
        try{ <DELIMITADOR_FPA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }FIM_CHAMADA_FUNCAO() }
//################################################################################
void CHAMADA_FUNCAO():{}{ ATRIBUTO() PARAMETROS() 
|
        try{ <DELIMITADOR_FPA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }FIM_CHAMADA_FUNCAO() }
//################################################################################
void FIM_CHAMADA_FUNCAO():{}{ 
        try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
        try{ <DELIMITADOR_ACHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }(ALG())* FIM_FUNCAO() }
//################################################################################
void OPERADOR():{}{ 
        try{ <OPERADOR_ATRIBUICAO>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
        try{ <OPERADOR_ATRIBUICAO_IGU>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
void ATRIBUIR():{}{
        try{ <DELIMITADOR_ACO>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
        try{ <INT_CONSTANTE>}catch (Exception e){
        System.out.println(e);
        INIT();
    } 
        try{ <DELIMITADOR_FCO>}catch (Exception e){
        System.out.println(e);
        INIT();
    } ATRIBUIR_VETOR() | OPERADOR() ATRIBUTO() ATRIBUIR_NOR() 
|
        try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    } 
        try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    } ATRIBUIR() 
|
        try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
void ATRIBUIR_NOR():{}{ OPERADORES() ATRIBUTO() ATRIBUIR_NOR() 
|
        try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
        try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    } ATRIBUIR() 
|
        try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
void ATRIBUIR_VETOR():{}{ 
        try{ <DELIMITADOR_ACO>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
        try{ <INT_CONSTANTE>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
        try{ <DELIMITADOR_FCO>}catch (Exception e){
        System.out.println(e);
        INIT();
    } ATRIBUIR_MATRIZ() | OPERADOR() ATRIBUTO() ATRIBUIR_VETOR_FIM() 
|
        try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
        try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    } ATRIBUIR() 
|
        try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
void ATRIBUIR_VETOR_FIM():{}{ OPERADORES() ATRIBUTO() ATRIBUIR_VETOR_FIM() 
|
        try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
       try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }ATRIBUIR() 
|
       try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
void ATRIBUIR_MATRIZ():{}{ 
       try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
       try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }ATRIBUIR() | OPERADOR() ATRIBUTO() ATRIBUIR_MATRIZ_FIM() 
|
       try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
void ATRIBUIR_MATRIZ_FIM():{}{ OPERADORES() ATRIBUTO() ATRIBUIR_MATRIZ_FIM() 
|
       try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
       try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    } ATRIBUIR() 
|
       try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
void INICIANDO_IF():{}{ ATRIBUTO() (IF_SEQ())? 
|
       (try{ <OPERADOR_NEGACAO>}catch (Exception e){
        System.out.println(e);
        INIT();
    } )?
       try{ <DELIMITADOR_APA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }(<OPERADOR_NEGACAO>)? INICIANDO_IF()
       try{ <DELIMITADOR_FPA>}catch (Exception e){
        System.out.println(e);
        INIT();
    } (IF_ATRIBUTO())?}
//################################################################################
void IF_SEQ():{}{
       try{ <OPERADOR_RELACIONAL>}catch (Exception e){
        System.out.println(e);
        INIT();
    } INICIANDO_IF() 
|
       try{ <OPERADOR_LOGICO>}catch (Exception e){
        System.out.println(e);
        INIT();
    } INICIANDO_IF() | OPERADORES() INICIANDO_IF() }
//################################################################################
void IF_ATRIBUTO():{}{ OPERADORES() ATRIBUTO() (IF_SEQ())? }
//################################################################################
void CONTEUDO_IF():{}{
       try{ <DELIMITADOR_ACHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    } (ALG())*
       try{ <DELIMITADOR_FCHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    } (INICIANDO_ELSE())? }
//################################################################################
void INICIANDO_ELSE():{}{ 
       try{ <ELSE>}catch (Exception e){
        System.out.println(e);
        INIT();
    }ELSEIF() }
//################################################################################
void ELSEIF():{}{ 
       try{ <IF>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
       try{ <DELIMITADOR_APA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }INICIANDO_IF() 
       try{ <DELIMITADOR_FPA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }(CONTEUDO_IF())? | CONTEUDO_IF() 
|
        try{ <DELIMITADOR_APA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }INICIANDO_IF() 
        try{ <DELIMITADOR_FPA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }(CONTEUDO_IF())? }
//################################################################################
void INICIANDO_FOR():{}{
       try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }(FOR_INCRE())? 
       try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    } ATRIBUTO() (FOR_VARIOS_INCRE())?
       try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    }FOR_ATE()
       try{ <DELIMITADOR_FPA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
       try{ <DELIMITADOR_ACHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    } (ALG())* 
       try{ <DELIMITADOR_FCHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
void FOR_INCRE():{}{
      try{ <OPERADOR_ATRIBUICAO_IGU>}catch (Exception e){
        System.out.println(e);
        INIT();
    }ATRIBUTO() (FOR_VARIOS_INCRE())? }
//################################################################################
void FOR_VARIOS_INCRE():{}{ OPERADORES() ATRIBUTO() 
|
     try{ <OPERADOR_RELACIONAL>}catch (Exception e){
        System.out.println(e);
        INIT();
    }ATRIBUTO()}
//################################################################################
void CORPO_FOR():{}{
    try{ <DELIMITADOR_ACHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    } (ALG())* 
    try{ <DELIMITADOR_FCHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
void FOR_ATE():{}{ FOR_ATRIBUTO() (FOR_VARIOS_INCRE())? |
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    } FOR_FIM() }
//################################################################################
void FOR_ATRIBUTO():{}{ 
    try{ <INT_CONSTANTE>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
    try{ <REAL_CONSTANTE>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
    try{ <LOGICO_CONSTANTE>}catch (Exception e){
        System.out.println(e);
        INIT();
    } 
|
    try{ <STRING_CONSTANTE>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
void FOR_FIM():{}{
    try{ <OPERADOR_RELACIONAL>}catch (Exception e){
        System.out.println(e);
        INIT();
    } ATRIBUTO() 
|
    try{ <OPERADOR_ATRIBUICAO>}catch (Exception e){
        System.out.println(e);
        INIT();
    } ATRIBUTO() 
|
    try{ <OPERADOR_INCREMENTO>}catch (Exception e){
        System.out.println(e);
        INIT();
    } }
//################################################################################
//void INICIANDO_DO():{}{} ##################################################################################
//void INICIANDO_WHILE():{}{}##################################################################################
//void INICIANDO_SWITCH():{}{}##################################################################################
//void INICIANDO_CASE():{}{}##################################################################################
//void INICIANDO_RETURN():{}{}##################################################################################

//################################################################################
void INICIANDO_TIPO():{}{ 
    try{ <DELIMITADOR_APA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }FUNCAO() 
| DECLARACAO_VA() }
//################################################################################
void FUNCAO():{}{ ATRIBUTO() PARAMETROS_FUNCAO() 
| 
    try{ <DELIMITADOR_FPA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <DELIMITADOR_ACHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }(ALG())? FIM_FUNCAO() }
//################################################################################
void FIM_FUNCAO():{}{ 
    try{ <DELIMITADOR_FCHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }(
    try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    })? }
//################################################################################
void PARAMETROS_FUNCAO():{}{ 
    try{ <DELIMITADOR_FPA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <DELIMITADOR_ACHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }(ALG())* FIM_FUNCAO() 
| OPERADORES() ATRIBUTO() PARAMETROS_FUNCAO() }
//################################################################################
void DECLARACAO_VA():{}{
    try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }DECLARACAO_VA() 
| 
    try{ <DELIMITADOR_ACO>}catch (Exception e){
        System.out.println(e);
        INIT();
    } (
        try{ <INT_CONSTANTE>}catch (Exception e){
            System.out.println(e);
            INIT();
        }  
       )?
    try{ <DELIMITADOR_FCO>}catch (Exception e){
            System.out.println(e);
            INIT();
        }DECLARACAO_VETOR() 
| 
    try{ <OPERADOR_ATRIBUICAO_IGU>}catch (Exception e){
            System.out.println(e);
            INIT();
        }ATRIBUTO() SOBREPOSICAO_ATRIBUTO() 
| 
    try{ <DELIMITADOR_PV>}catch (Exception e){
            System.out.println(e);
            INIT();
        } }
//################################################################################
void INICIANDO_CLA():{}{
    try{ <TIPOS_PRIMITIVOS>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }DECLARACAO_VA()}


void ATRIBUTO():{}{
    try{ <INT_CONSTANTE>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
    try{ <REAL_CONSTANTE>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
    try{ <LOGICO_CONSTANTE>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
    try{ <STRING_CONSTANTE>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
}
//################################################################################
void SOBREPOSICAO_ATRIBUTO():{}{ OPERADORES() ATRIBUTO() SOBREPOSICAO_ATRIBUTO() 
| 
    try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    } DECLARACAO_VA() 
|
    try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    }}
//################################################################################
void OPERADORES():{}{ 
    try{ <OPERADOR_ARITMETICO>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
    try{ <OPERADOR_ARITMETICO_MULT>}catch (Exception e){
        System.out.println(e);
        INIT();
    }} 
//################################################################################
void DECLARACAO_VETOR():{}{
    try{ <DELIMITADOR_FCO>}catch (Exception e){
        System.out.println(e);
        INIT();
    }DECLARACAO_MATRIZ() 
| 
    try{ <OPERADOR_ATRIBUICAO_IGU>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <DELIMITADOR_ACHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }(ATRIBUTO_VETOR())?
    try{ <DELIMITADOR_FCHA>}catch (Exception e){
        System.out.println(e);
        INIT();
    }FIM_MATRIZ() 
|
    try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    }}
//################################################################################
void DECLARACAO_MATRIZ():{}{ 
    try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
    try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }DECLARACAO_VA() 
|
    try{ <OPERADOR_ATRIBUICAO_IGU>}catch (Exception e){
        System.out.println(e);
        INIT();
    }
|
    try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    }}
//################################################################################
void FIM_MATRIZ():{}{ 
    try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }try{ <IDENTIFICADOR>}catch (Exception e){
        System.out.println(e);
        INIT();
    }DECLARACAO_VA() 
|
     try{ <DELIMITADOR_PV>}catch (Exception e){
        System.out.println(e);
        INIT();
    }}
//################################################################################
void ATRIBUTO_VETOR():{}{ ATRIBUTO() ATRIBUTO_VETOR_DETALHADO() }

//################################################################################
void ATRIBUTO_VETOR_DETALHADO():{}{ 
    try{ <DELIMITADOR_V>}catch (Exception e){
        System.out.println(e);
        INIT();
    }ATRIBUTO() ATRIBUTO_VETOR_DETALHADO() 
| OPERADORES() ATRIBUTO() ATRIBUTO_VETOR_DETALHADO() }